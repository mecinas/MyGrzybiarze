import axios from 'axios'
import React, { useState, useEffect, useRef } from 'react'
import { Container, Row, Col, Image, Card, Table, Button, Form } from 'react-bootstrap'
import { useHistory } from "react-router-dom";
import { Pencil } from 'react-bootstrap-icons';
import { useAuth0 } from '@auth0/auth0-react';

import '../styles/AccountManager.css';
import EditProfileModal from './EditProfileModal'

//Podział komponentu na mniejsze
    //UserTable.jsx
    //Avatar.jsx

export default function AccountManager() {
    const [source, setSource] = useState({ source: null })
    const [userInfo, setUserInfo] = useState()
    const [modalTitle, setModalTitle] = useState()
    const [modalForm, setModalForm] = useState()
    const [modalURL, setModalURL] = useState()
    const { user } = useAuth0();
    let history = useHistory();

    const [showEditModal, setShowEditModal] = useState(false);
    const handleCloseEditModal = () => {
        setShowEditModal(false);
    }
    const handleShowEditModal = () => setShowEditModal(true);

    const hiddenFileInput = React.useRef(null);

    const handleFileInputClick = e => {
        hiddenFileInput.current.click();
    }
    const handleFileInputChange = e => {
        const photoUploaded = e.target.files[0];
        const data = new FormData();
        data.append('avatar', photoUploaded)
        data.append('email', user.email)
        putAvatar(data)
    }

    const putAvatar = (data) => {
        var url = "http://localhost:5000/avatar"
        axios.put(url, data, {
            headers: {
              'accept': 'application/json',
              'Accept-Language': 'en-US,en;q=0.8',
              'Content-Type': `multipart/form-data; boundary=${data._boundary}`,
            }
          })
            .then(response => {
                console.log(response)
            })
            .catch(error => {
                console.log(error.message)
            })
            setTimeout(() => {
                getAvatar()
            }, 2000);
    }

    const getAvatar = () => {
        const time = new Date().getTime();
        var url = "http://localhost:5000/avatar"
        if (user !== undefined) {
            axios.get(url, {
                responseType: 'arraybuffer',
                params: {
                    email: user.email,
                    t: time
                }
            })
                .then(response => {
                    setSource(encodeImage(response.data))
                })
                .catch(error => {
                    console.log(error.message)
                })
        }
    }

    const getInfo = () => {
        var url = "http://localhost:5000/getInfo"
        if (user != undefined) {
            axios.get(url, {
                params: {
                    email: user.email
                }
            })
                .then(resp => {
                    setUserInfo(resp.data)
                })
        }
    }

    const deleteUser = () => {
        var url = "http://localhost:5000/register"
        axios.delete(url, { data: { email: user.email } })
            .then(response => {
                history.push("/")
            })
            .catch(error => {
                console.log(error.message)
            })
    }

    function encodeImage(arrayBuffer) {
        let b64encoded = btoa([].reduce.call(new Uint8Array(arrayBuffer), function (p, c) { return p + String.fromCharCode(c) }, ''))
        let mimetype = "image/png"
        return "data:" + mimetype + ";base64," + b64encoded
    }

    const setModalForName = () => {
        setModalTitle("Edytuj swoje imię i nazwisko")
        setModalURL("http://localhost:5000/account/change/name")
        setModalForm(
            <div>
                <Form.Group controlId="formBasicFirstname">
                    <Form.Control type="text" name='firstname' placeholder="Podaj nowe imię" />
                </Form.Group>

                <Form.Group controlId="formBasicSurname">
                    <Form.Control type="text" name='surname' placeholder="Podaj nowe nazwisko" />
                </Form.Group>
            </div>
        )
    }
    const setModalForNickname = () => {
        setModalTitle("Edytuj swój nick")
        setModalURL("http://localhost:5000/account/change/nickname")
        setModalForm(
            <div>
                <Form.Group controlId="formBasicFirstname">
                    <Form.Control type="text" name='nickname' placeholder="Podaj nowy nick" />
                </Form.Group>
            </div>
        )
    }

    const setModalForDateOfBirth = () => {
        setModalTitle("Edytuj swoją datę urodzenia")
        setModalURL("http://localhost:5000/account/change/dateOfBirth")
        setModalForm(
            <div>
                <Form.Group controlId="formBasicDateOfBirth">
                    <Form.Control type="date" name='dateOfBirth' placeholder="Podaj datę urodzenia" />
                </Form.Group>
            </div>
        )
    }

    useEffect(() => {
        getAvatar()
    }, [user])

    useEffect(() => {
        getInfo()
        setTimeout(() => {
            getInfo()
        }, 2000);
    }, [user, showEditModal])


    return (
        <Container className="account_container">
            {user &&
                <EditProfileModal
                    showEditModal={showEditModal}
                    handleCloseEditModal={handleCloseEditModal}
                    title={modalTitle}
                    form={modalForm}
                    modalURL={modalURL}
                    email={user.email} />
            }
            <Row>
                <Col className="account_avatar_col">
                    <Image className="avatar_img" src={source} roundedCircle />
                    <Button className="pencil_ico" variant="light" onClick={handleFileInputClick} >
                        <Pencil color="brown" size={20} />
                        <input
                            type="file"
                            ref={hiddenFileInput}
                            onChange={handleFileInputChange}
                            name="myImage"
                            style={{ display: 'none' }} />
                    </Button>
                </Col>
            </Row>
            <Row>
                <Col>
                    <Card className="text-center profile_card">
                        <Card.Header>Profil</Card.Header>
                        <Card.Body >
                            <Card.Title className="text-left">Twoje informacje</Card.Title>
                            {userInfo &&
                                <Table striped className="text-left">
                                    <tbody>
                                        <tr>
                                            <td>Nazwa użytkownika</td>
                                            <td>{userInfo.nickname}</td>
                                            <td>
                                                <Button className="pencil_table_ico" variant="light" onClick={() => {
                                                    setModalForNickname();
                                                    handleShowEditModal();
                                                }}>
                                                    <Pencil color="brown" size={20} />
                                                </Button>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Imię i nazwisko</td>
                                            <td>{userInfo.firstname} {userInfo.surname}</td>
                                            <td>
                                                <Button className="pencil_table_ico" variant="light" onClick={() => {
                                                    setModalForName();
                                                    handleShowEditModal();
                                                }}>
                                                    <Pencil color="brown" size={20} />
                                                </Button>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Data urodzenia</td>
                                            <td>{userInfo.dateOfBirth}</td>
                                            <td>
                                                <Button className="pencil_table_ico" variant="light" onClick={() => {
                                                    setModalForDateOfBirth();
                                                    handleShowEditModal();
                                                }}>
                                                    <Pencil color="brown" size={20} />
                                                </Button>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Adres e-mail</td>
                                            <td colSpan="2">{userInfo.email}</td>
                                        </tr>
                                    </tbody>
                                </Table>
                            }
                        </Card.Body>
                        <Card.Footer>
                            <Button variant="outline-danger" onClick={() => deleteUser()}>Usuń konto</Button>
                        </Card.Footer>
                    </Card>
                </Col>
            </Row>
        </Container>

    )
}
